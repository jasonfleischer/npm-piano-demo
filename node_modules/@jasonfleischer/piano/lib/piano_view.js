const musicKit = require("@jasonfleischer/music-model-kit");


class PianoView {
	constructor(id = "piano_view_id", width = 1000, range = musicKit.piano_range, interative = true) {

	  	this.id = id;

	  	this.WIDTH = width;
		this.HEIGHT = 93;
		this.BORDER_WIDTH = 1;

		this.min_note_value = range.min;
		this.max_note_value = range.max;

		this.note_value_to_piano_key_map = {};


		buildCanvases();


	    this.black_keys_canvas = document.getElementById("piano_black_keys_canvas_"+id);
		this.black_keys_canvas.width=this.WIDTH;
		this.black_keys_canvas.height=this.HEIGHT;

		this.white_keys_canvas = document.getElementById("piano_white_keys_canvas_"+id);
		this.white_keys_canvas.width=this.WIDTH;
		this.white_keys_canvas.height=this.HEIGHT;

		this.canvas_background = document.getElementById("piano_background_canvas_"+id);
		this.canvas_background.width=this.WIDTH;
		this.canvas_background.height=this.HEIGHT;

		this.draw_background();
	}


	buildCanvases() {

		//let height = "230px"
		let pianoView = document.getElementById(this.id);

		var canvas = document.createElement('canvas'); 
	    canvas.id = "piano_background_canvas_"+this.id;
	    canvas.style.position = "absolute"
	    canvas.style.left = "0px"
	    canvas.style.right = "0px"
	    canvas.style.width = this.WIDTH + "px";
		canvas.style.height = this.HEIGHT;
	    pianoView.appendChild(canvas);

	    var canvas = document.createElement('canvas'); 
	    canvas.id = "piano_white_keys_canvas_"+this.id;
	    canvas.style.position = "absolute"
	    canvas.style.left = "0px"
	    canvas.style.right = "0px"
	    canvas.style.width = this.WIDTH + "px";
		canvas.style.height = this.HEIGHT;
	    pianoView.appendChild(canvas);

	    var canvas = document.createElement('canvas'); 
	    canvas.id = "piano_black_keys_canvas_"+this.id;
	    canvas.style.position = "absolute"
	    canvas.style.left = "0px"
	    canvas.style.right = "0px"
	    canvas.style.width = this.WIDTH + "px";
		canvas.style.height = this.HEIGHT;
	    pianoView.appendChild(canvas);


		//pianoView.style.backgroundColor = "grey";
		//pianoView.id = id
		pianoView.style.position = "relative"
		pianoView.style.width = this.WIDTH + "px";
		pianoView.style.height = this.HEIGHT;
	}

	resize(newWidth) {
		var newWidth = Math.min(newWidth, this.WIDTH);

		var newHeight = newWidth * (this.HEIGHT/this.WIDTH);
		document.getElementById(this.id).style.height = newHeight + "px";
		this.canvas_background.style.height = newHeight + "px";
		this.black_keys_canvas.style.height = newHeight + "px";
		this.white_keys_canvas.style.height = newHeight + "px";

		document.getElementById(this.id).style.width = newWidth + "px";
		this.canvas_background.style.width = newWidth + "px";
		this.black_keys_canvas.style.width = newWidth + "px";
		this.white_keys_canvas.style.width = newWidth + "px";
	}

	draw_background(){

		var ctx = this.canvas_background.getContext("2d");

		let number_of_white_keys = 0;
		let number_of_black_keys = 0;

		for(i = this.min_note_value; i <= this.max_note_value; i++){
			var note = musicKit.all_notes[i];
			if(!note.note_name.is_sharp_or_flat){
				number_of_white_keys++;
			} else {
				number_of_black_keys++;
			}
		}

		let white_key_width = Math.floor((this.WIDTH - ((number_of_white_keys+1)*this.BORDER_WIDTH) )/ number_of_white_keys);
		let white_key_height =  Math.floor(white_key_width * 5);

		var white_keys = [];
		
		var i;
		var x = this.BORDER_WIDTH + (this.WIDTH - ((white_key_width + this.BORDER_WIDTH ) * number_of_white_keys))/2;//.WIDTH - ((number_of_white_keys+1)*this.BORDER_WIDTH) )/2;
		for(i = this.min_note_value; i <= this.max_note_value; i++){
			var note = musicKit.all_notes[i];
			if(!note.note_name.is_sharp_or_flat){

				let key = new PianoView.Key(x, this.BORDER_WIDTH, 
					white_key_width, this.BORDER_WIDTH+white_key_height, note, "#fff")
				white_keys.push(key)

				this.note_value_to_piano_key_map[note.note_value] = key
				x = x + white_key_width + this.BORDER_WIDTH;
			}
		}

		var j;
		for(j = 0; j < white_keys.length; j++){	
			var white_key = white_keys[j];
			white_key.draw(ctx);
		}

		var black_keys = [];
		var black_key_width = Math.floor(white_key_width * 0.6);
		var black_key_height = Math.floor(white_key_height * 0.67);
		var k;
		for(k = this.min_note_value; k <= this.max_note_value; k++){
			var note = musicKit.all_notes[k];
			if(note.note_name.is_sharp_or_flat){

				var flat_key = this.note_value_to_piano_key_map[note.note_value-1];
				var sharp_key = this.note_value_to_piano_key_map[note.note_value+1];
				if( flat_key != undefined && sharp_key != undefined) {

					var x = flat_key.x + this.BORDER_WIDTH + white_key_width - black_key_width/2;
					let key = new PianoView.Key(x, this.BORDER_WIDTH, black_key_width, black_key_height, note, "#333")
					black_keys.push(key)
					this.note_value_to_piano_key_map[note.note_value] = key
				}
			}
		}

		var l;
		for(l = 0; l < black_keys.length; l++){	
			var black_key = black_keys[l];
			black_key.draw(ctx);
		}
	}


	clear() {
		this.black_keys_canvas.getContext("2d").clearRect(0, 0, this.WIDTH, this.HEIGHT);
		this.white_keys_canvas.getContext("2d").clearRect(0, 0, this.WIDTH, this.HEIGHT);
	}


	drawNote(note){

		this.clear(); // todo rm?
		this.drawNoteWithColor(note);
	}

	drawNoteWithColor(note, color=note.note_name.color){

		var ctx = note.note_name.is_sharp_or_flat ? this.black_keys_canvas.getContext("2d") : 
													this.white_keys_canvas.getContext("2d");

		let key = this.note_value_to_piano_key_map[note.note_value];
		key.draw(ctx, color);
		if (!note.note_name.is_sharp_or_flat){

			var flat_key = this.note_value_to_piano_key_map[note.note_value-1];
			var sharp_key = this.note_value_to_piano_key_map[note.note_value+1];
			if (flat_key != undefined && flat_key.note.note_name.is_sharp_or_flat) {
				flat_key.draw(ctx);
			}
			if (sharp_key != undefined && sharp_key.note.note_name.is_sharp_or_flat) {
				sharp_key.draw(ctx);
			}
		}
	}

	drawInterval(interval){

		var play_type = interval.play_type;
		var first_note = (play_type == INTERVAL_PLAY_TYPE.ASCENDING) ? interval.lower_note : interval.higher_note;

		this.clear();
		this.drawNoteWithColor(first_note);
		setTimeout(() => {
			var second_note = (play_type == INTERVAL_PLAY_TYPE.ASCENDING) ? interval.higher_note : interval.lower_note;
			this.drawNoteWithColor(second_note);
		}, (interval.play_type == INTERVAL_PLAY_TYPE.HARMONIC) ? 0 : interval.delay_in_ms);	
	}

	drawChord(chord){

		this.clear();

		var j;
		for(j=0; j<chord.note_array.length; j++) {
			var note = chord.note_array[j];
			var label = chord.note_labels[j];
			if (label == 'R'){
				this.drawNoteWithColor(note);
			} else {
				this.drawNoteWithColor(note, "#999");
			}
		}
	}
}

PianoView.Key = class  {
	constructor(x, y, width, height, note, color){
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.note = note;
		this.color = color;
	}

	draw(ctx, color = this.color) {
		ctx.beginPath();
		ctx.lineWidth = 0;
		ctx.fillStyle = color;
		ctx.rect(this.x, this.y, this.width, this.height);
		ctx.fill();
		ctx.stroke();
    	
    	if (this.note.note_name.name == 'C' && this.note.octave == 4) {
			ctx.beginPath();
			ctx.arc(this.x + (this.width)/2, this.height - this.height*0.10, this.width * 0.15, 0, 2 * Math.PI, false);
			ctx.fillStyle = '#666';
			ctx.fill();
    	}
	}
}

module.exports = PianoView