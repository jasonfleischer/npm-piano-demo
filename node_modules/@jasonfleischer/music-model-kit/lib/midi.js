const log = require("@jasonfleischer/log")

class Midi {
	
	constructor(noteOn, noteOff){

		this.noteOn = noteOn;
		this.noteOff = noteOff;
		this.devices = [];

		let self = this

		let devices = this.devices;

		if (!navigator.requestMIDIAccess) {
			log.e("this browser does not support midi");
			return
		}

		/*navigator.permissions.query({name: 'midi-sysex'}).then(function(result) {
			if(result.state == 'granted') {
				log.e("Midi permissions granted");
			} else if (result.state == 'prompt'){
				log.e("Midi permissions prompt");
			} else {
				log.e("Midi permissions denied");
			}
		});

		navigator.permissions.query({name: 'sysex'}).then(function(result) {
			if(result.state == 'granted') {
				log.e("Midi permissions granted");
			} else if (result.state == 'prompt'){
				log.e("Midi permissions prompt");
			} else {
				log.e("Midi permissions denied");
			}
		});

		navigator.permissions.query({name: 'midi'}).then(function(result) {
			if(result.state == 'granted') {
				log.e("Midi permissions granted!!");
			} else if (result.state == 'prompt'){
				log.e("Midi permissions prompt");
			} else {
				log.e("Midi permissions denied");
			}
		});*/

		navigator.permissions.query({name: 'midi', sysex: true}).then(function(result) {
			if(result.state == 'granted') {
				log.e("Midi permissions granted!");


/*navigator.requestMIDIAccess({sysex: true}).then(function(access) {
			if (access.inputs.size > 0) {
				log.e("9")
				devices = access.inputs.values();
				self.connectToFirstDevice();
			} else {
				log.e("no midi inputs " + access.inputs.size);
			}
			access.onstatechange = function(e) {
				log.e("Midi State change");
				devices = Array.from(this.inputs.values());
				self.connectToFirstDevice();
			}
    	}, function() {
    		log.e("Midi Falure");
    	});*/



			} else if (result.state == 'prompt'){
				log.e("Midi permissions prompt");
			} else {
				log.e("Midi permissions denied");
			}
		});

		navigator.requestMIDIAccess({sysex: true}).then(function(access) {
			if (access.inputs.size > 0) {
				log.i("Midi input size: " + access.inputs.size)
				self.devices = access.inputs.values();
				self.connectToFirstDevice(Array.from(access.inputs.values()));
			} else {
				log.e("no midi inputs 2: "  + access.inputs.size);
			}
			access.onstatechange = function(e) {
				log.e("Midi State change 2");
				self.devices = Array.from(this.inputs.values());
				self.connectToFirstDevice(Array.from(access.inputs.values()));
			}
    	}, function() {
    		log.e("Midi Falure");
    	});
	}

	connectToFirstDevice(devices) {
		log.e("Len: "  + devices.length);
		if (devices.length > 0) {
			let device = devices[0];
			this.connectToDevice(device);
		} else {
			log.e("connectToFirstDevice: no midi inputs");	
		}
	}

	connectToDevice(device) {
	  	log.e('Connecting to device: ' + device);
	  	this.connectedDevice = device;

	  	let noteOn = this.noteOn;
		let noteOff = this.noteOff;
		let KEY_UP = 128;
		let KEY_DOWN = 144;
	  	device.onmidimessage = function(m) {
		    const [command, midi_value, velocity] = m.data;
		    if (command === KEY_UP) {
		    	log.e('KEY UP: ' + midi_value);
		    	noteOff(midi_value, velocity);
		    } else if(command === KEY_DOWN) {
		      	log.e('KEY DOWN: '+ midi_value);
		      	noteOn(midi_value, velocity);
		    }
		 }
	}


	deviceToString(device) {
		return device.name + ' ' + device.manufacturer;
	}
}

module.exports = Midi