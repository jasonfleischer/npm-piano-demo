const log = require("@jasonfleischer/log");
class Chord {

	static TYPE = Object.freeze({
		Major: "Major",
		minor: "minor",
		Aug: "augmented",
		Dim: "diminished",

		Major7: "Major 7",
		minor7: "minor 7",
		Dom7: "Dominant 7"
	});

	static INVERSION_TYPE = Object.freeze({
		Root: "Root",
		First: "first inversion",
		Second: "second inversion",
		Third: "third inversion"
	});

	static PLAY_TYPE = Object.freeze({
		HARMONIC: "Harmonic",
		ARPEGGIATE: "Arpeggiate"
	});

	constructor(root_note, chord_type = Chord.TYPE.Major, play_type = Chord.PLAY_TYPE.HARMONIC, inversion = Chord.INVERSION_TYPE.Root) {

		this.root_note = root_note;
		this.delay_in_ms = 500;
		this.name = root_note.note_name.name + " " + chord_type;
		this.inversion = inversion
		this.type = chord_type
		this.play_type = play_type

		function replaceAll(str, find, replace) {
			return str.replace(new RegExp(find, 'g'), replace);
		}
		this.file_name = root_note.note_name.file_name.concat(["audio/chords/"+ replaceAll(this.type.toLowerCase(),' ','_') +".mp3"]);

		switch(chord_type){
		case Chord.TYPE.Major:
			if(this.inversion == Chord.INVERSION_TYPE.Root) {
				this.note_sequence = [0, 4, 7];
			} else if (this.inversion == Chord.INVERSION_TYPE.First){
				this.note_sequence = [-8, -5, 0];
			} else {
				this.note_sequence = [-5, 0, 4]; 
			}
			break;
		case Chord.TYPE.minor:
			if(this.inversion == Chord.INVERSION_TYPE.Root) {
				this.note_sequence = [0, 3, 7];
			} else if (this.inversion == Chord.INVERSION_TYPE.First){
				this.note_sequence = [-9, -5, 0];
			} else {
				this.note_sequence = [-5, 0, 3];
			}
			break;

		case Chord.TYPE.Aug:
			this.inversion = Chord.INVERSION_TYPE.Root;
			this.note_sequence = [0, 4, 8];
			break;
		 case Chord.TYPE.Dim:
			this.inversion = Chord.INVERSION_TYPE.Root;
			this.note_sequence = [0, 3, 6];
			break;

		case Chord.TYPE.Major7:

			if(this.inversion == Chord.INVERSION_TYPE.Root) {
				this.note_sequence = [0, 4, 7, 11];
			} else if (this.inversion == Chord.INVERSION_TYPE.First){
				this.note_sequence = [-8, -5, -1, 0];
			} else if (this.inversion == Chord.INVERSION_TYPE.Second){
				this.note_sequence = [-5, -1, 0, 4];
			} else {
				this.note_sequence = [-1, 0, 4, 7];
			}
			this.file_name = root_note.note_name.file_name.concat(["audio/chords/major_seventh.mp3"]);
			break;
		case Chord.TYPE.minor7:
			if(this.inversion == Chord.INVERSION_TYPE.Root) {
				this.note_sequence = [0, 3, 7, 10];
			} else if (this.inversion == Chord.INVERSION_TYPE.First){
				this.note_sequence = [-9, -5, -2, 0];
			} else if (this.inversion == Chord.INVERSION_TYPE.Second){
				this.note_sequence = [-5, -2, 0, 3];
			} else {
				this.note_sequence = [-2, 0, 3, 7];
			}
			this.file_name = root_note.note_name.file_name.concat(["audio/chords/minor_seventh.mp3"]);
			break;

		case Chord.TYPE.Dom7:
			if(this.inversion == Chord.INVERSION_TYPE.Root) {
				this.note_sequence = [0, 4, 7, 10];
			} else if (this.inversion == Chord.INVERSION_TYPE.First){
				this.note_sequence = [-8, -5, -2, 0];
			} else if (this.inversion == Chord.INVERSION_TYPE.Second){
				this.note_sequence = [-5, -2, 0, 4];
			} else {
				this.note_sequence = [-2, 0, 4, 7];
			}
			break;
		}
		this.note_labels = this.getLabels();
		this.structure = this.getStructure();
	}

	getLabels() {
		let result = [];
		let all_labels = ["R", "m2", "M2", "m3", "M3", "P4", "TT", "P5", "m6", "M6", "m7", "M7"];
		var i;
		for(i=0; i<=this.note_sequence.length; i++){
			var sequence = this.note_sequence[i]
			if(sequence < 0) {
				sequence = 12 + sequence;
			}
			result.push(all_labels[sequence]);
		}
		return result;
	}

	getStructure() {
		let result = [];
		let all_labels = ["Root", "minor 2nd", "Mahor 2nd", "minor 3rd", "Major 3rd", "Fourth",
						  "Tritone", "Fifth", "minor 6th", "Major 6th", "minor 7th", "Major 7th"];
		var i;
		for(i=0; i<=this.note_sequence.length; i++){
			var sequence = this.note_sequence[i]
			if(sequence < 0) {
				sequence = 12 + sequence;
			}
			result.push(all_labels[sequence]);
		}
		return result;
	}

	to_string() {
		return  "CHORD: " + this.name +", "+ this.structure + ", ", this.note_sequence;
	}

	isWithinRange(range) {
		return (this.root_note.midi_value + this.note_sequence[0]) >= range.min  && 
			(this.root_note.midi_value + this.note_sequence[this.note_sequence.length-1]) <= range.max;
	}

	getNoteArray(all_notes, range) {
		function isNoteWithinRange(midi_number, range){
			return midi_number >= range.min && midi_number <= range.max ;
		}

		var note_array = [];
		var i;
		for(i=0; i<this.note_sequence.length; i++){
			let midi_number = this.root_note.midi_value + this.note_sequence[i];
			if(isNoteWithinRange(midi_number, range)){
				note_array.push(all_notes[midi_number]);
			}
		}
		if (note_array.length == 0) {
			log.e("no notes found for chord");  
		}
		return note_array;
	}
}

const ALL_CHORD_TYPES = [Chord.TYPE.Major, Chord.TYPE.minor, Chord.TYPE.Major7, Chord.TYPE.minor7];

function type_is_three_notes(chord_type) {
	return chord_type == Chord.TYPE.Major || chord_type == Chord.TYPE.minor || chord_type == Chord.TYPE.Aug || chord_type == Chord.TYPE.Dim 
}

function generate_random_chord(min, max){

	var chord_array = []
	if(model.chords.three_note_types.length == 0 && model.chords.four_note_types.length == 0){
		log.e("fatal error: generate_random_chord")
	} else if (model.chords.three_note_types.length > 0 && model.chords.four_note_types.length == 0){
		chord_array = model.chords.three_note_types
	}else if (model.chords.three_note_types.length == 0 && model.chords.four_note_types.length > 0){
		chord_array = model.chords.four_note_types
	}else {
		chord_array = model.chords.three_note_types.concat(model.chords.four_note_types);
	}

	var random_note = generate_random_note(min, max-18);// hack so it doesn't go out of bounds
	var random_chord_type = chord_array[ randomIntFromInterval(0, chord_array.length-1) ];

	var play_type = model.chords.play_types[ randomIntFromInterval(0, model.chords.play_types.length-1) ];
	var inversion = INVERSION_TYPE.Root;
	if (type_is_three_notes(random_chord_type)){
		inversion = model.chords.three_note_inversion_types[ randomIntFromInterval(0, model.chords.three_note_inversion_types.length-1) ];
	} else{
		inversion = model.chords.four_note_inversion_types[ randomIntFromInterval(0, model.chords.four_note_inversion_types.length-1) ];
	}
	var random_chord = new Chord(random_note, random_chord_type, play_type, inversion);

	return random_chord;
}

function generate_chord_with_note(note_name, all_notes){

	var random_chord_type = ALL_CHORD_TYPES[ randomIntFromInterval(0, ALL_CHORD_TYPES.length-1) ];
	var octave = 1 + randomIntFromInterval(2, 4);// limit to lower register
	var note = all_notes[note_name.associated_midi_values[octave]];

	var play_type = Chord.PLAY_TYPE.HARMONIC;
	var inversion = Chord.INVERSION_TYPE.Root;
	var random_chord = new Chord(note, random_chord_type, play_type, inversion);

	return random_chord;
}

module.exports = Chord;

