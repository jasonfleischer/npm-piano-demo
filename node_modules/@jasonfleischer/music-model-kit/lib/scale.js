const log = require("@jasonfleischer/log")
class Scale {
  static TYPE = Object.freeze({
    minor: "minor",
    Major: "Major",
    Ionian: "Ionian",
    Dorian: "Dorian",
    Phrygian: "Phrygian",
    Lydian: "Lydian",
    Mixolydian: "Mixolydian",
    Aeolian: "Aeolian",
    minor_Pentatonic: "minor pentatonic",
    Major_Pentatonic: "Major pentatonic",
  });
  constructor(root_note, scale_type = Scale.TYPE.Major){
    this.root_note =root_note;
    this.type = scale_type;
    this.file_name = root_note.note_name.file_name.concat(["audio/scale/"+ this.type +".mp3"]);

    switch(scale_type){
      case Scale.TYPE.Ionian:
        this.note_sequence = [0, 2, 4, 5, 7, 9, 11];
        break;
      case Scale.TYPE.Aeolian:
        this.note_sequence = [0, 2, 3, 5, 7, 8, 10];
        break;
    }
    this.note_labels = this.getLabels();
    this.structure = this.getStructure();
  }

  getNoteArray(all_notes, range) {
  
      
    var note_names = this.getUniqueNoteName(all_notes, range);

    var note_array = [];
    var i;
    for(i=range.min; i<=range.max; i++){
      var note = all_notes[i]
      if (note_names.has(note.note_name.type)) {
        note_array.push(note);
      }
    }
    if (note_array.length == 0) {
      log.e("no notes found for scale");  
    }
    return note_array;
  }

  getUniqueNoteName(all_notes, range) {

    function isNoteWithinRange(midi_number, range){
      return midi_number >= range.min && midi_number <= range.max ;
    }
    const noteNames = new Set();
    var i;
    for(i=0; i<this.note_sequence.length; i++){
      let midi_number = this.root_note.midi_value + this.note_sequence[i];
      if(isNoteWithinRange(midi_number, range)){
        noteNames.add(all_notes[midi_number].note_name.type);
      }
    }
    for(i=this.note_sequence.length-1; i>=0; i--){
      let midi_number = this.root_note.midi_value - (12 - this.note_sequence[i]);
      if(isNoteWithinRange(midi_number, range)){
        noteNames.add(all_notes[midi_number].note_name.type);
      }
    }
    return noteNames;
  }

  getLabels() {
    let result = [];
    let all_labels = ["R", "m2", "M2", "m3", "M3", "P4", "TT", "P5", "m6", "M6", "m7", "M7"];
    var i;
    for(i=0; i<=this.note_sequence.length; i++){
      result.push(all_labels[this.note_sequence[i]]);
    }
    return result;
  }

  getStructure() {
    let result = [];
    let all_labels = ["Root", "minor 2nd", "Mahor 2nd", "minor 3rd", "Major 3rd", "Fourth",
                      "Tritone", "Fifth", "minor 6th", "Major 6th", "minor 7th", "Major 7th"];
    var i;
    for(i=0; i<=this.note_sequence.length; i++){
      result.push(all_labels[this.note_sequence[i]]);
    }
    return result;
  }

  to_string() {
    return  "SCALE: " + this.root_note.note_name.type + ": " + this.structure;
  }
}
module.exports = Scale 