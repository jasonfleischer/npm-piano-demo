const log = require("@jasonfleischer/log")
class Scale {
  static TYPE = Object.freeze({
    Ionian: "Ionian",
    Aeolian: "Aeolian",
    minor_Pentatonic: "minor pentatonic",
    Major_Pentatonic: "Major pentatonic",
  });
  constructor(root_note, scale_type = Scale.TYPE.Major){
    this.root_note =root_note;
    this.type = scale_type;

    switch(scale_type){
      case Scale.TYPE.Major:
        this.note_sequence = [0, 2, 4, 5, 7, 9, 11];
        this.note_labels = ["R","M2", "M3", "P4", "P5", "M6", "M7"];
        this.structure = "Root, Major 2nd, Major 3rd, Fourth, Fifth, Major 6th, Major 7th";
        this.file_name = root_note.note_name.file_name.concat(["audio/scale/ionian.mp3"]);
        break;
      case Scale.TYPE.minor:
        this.note_sequence = [0, 2, 3, 5, 7, 8, 10];
        this.note_labels = ["R", "M2", "m3", "P4", "P5", "m6", "m7"];
        this.structure = "Root, Major 2nd, minor 3rd, Fourth, Fifth, minor 6th, minor 7th";
        this.file_name = root_note.note_name.file_name.concat(["audio/scale/aeolian.mp3"]);
        break;
    }
  }

  getNoteArray(all_notes, range) {
    
    var note_names = this.getUniqueNoteName(all_notes, range);

    log.e("?" + note_names.size);
    var note_array = [];
    var i;
    for(i=range.min; i<=range.max; i++){
      var note = all_notes[i]
      if (note_names.has(note.note_name.type)) {
        note_array.push(note);
      }
    }
    return note_array;
  }

  getUniqueNoteName(all_notes, range) {

    function isNoteWithinRange(midi_number, range){
      return midi_number >= range.min && midi_number <= range.max ;
    }

    const noteNames = new Set();
    var i;
    for(i=0; i<this.note_sequence.length; i++){
      let midi_number = this.root_note.midi_value + this.note_sequence[i];
      if(isNoteWithinRange(midi_number, range)){
        noteNames.add(all_notes[midi_number].note_name.type);
      }
    }
    for(i=this.note_sequence.length; i<=0; i--){
      let midi_number = this.root_note.midi_value - 12 - this.note_sequence[i];
      if(isNoteWithinRange(midi_number, range)){
        noteNames.add(all_notes[midi_number].note_name.type);
      }
    }

    log.e("?2" + noteNames.size);
    return noteNames;
  }

  to_string() {
    return  "SCALE: " + this.root_note.note_name.type + ": " + this.structure;
  }
}
module.exports = Scale 